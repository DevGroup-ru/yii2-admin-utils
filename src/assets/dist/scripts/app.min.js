!function n(e,o,t){function i(f,u){if(!o[f]){if(!e[f]){var l="function"==typeof require&&require;if(!u&&l)return l(f,!0);if(r)return r(f,!0);var a=new Error("Cannot find module '"+f+"'");throw a.code="MODULE_NOT_FOUND",a}var c=o[f]={exports:{}};e[f][0].call(c.exports,function(n){var o=e[f][1][n];return i(o?o:n)},c,c.exports,n,e,o,t)}return o[f].exports}for(var r="function"==typeof require&&require,f=0;f<t.length;f++)i(t[f]);return i}({1:[function(n,e,o){(function(n){"use strict";function e(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}var t=function(){function n(n,e){for(var o=0;o<e.length;o++){var t=e[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(e,o,t){return o&&n(e.prototype,o),t&&n(e,t),e}}();Object.defineProperty(o,"__esModule",{value:!0});var i=function(){function o(){e(this,o),"undefined"==typeof polyglot&&o.warn("You MUST setup and configure devgroup/yii2-polyglot."),"undefined"==typeof n.monster?o.warn("You MUST setup frontend-monster."):this.monster=n.monster}return t(o,[{key:"modalNotifier",value:function(n,e){return this.monster.showModalNotifier(n,e)}}],[{key:"warn",value:function(n){"undefined"!=typeof console?console.warn(n):"function"==typeof alert&&alert(n)}}]),o}();o.Yii2AdminApplication=i}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(n,e,o){(function(e){"use strict";var o=n("./Yii2AdminApplication.js");e.AdminApp=new o.Yii2AdminApplication}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./Yii2AdminApplication.js":1}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
